@page "/"

<div id=index>
	<textarea @bind-value="mdTxt" @bind-value:event="oninput"></textarea>
	<hr>
	<div v-html="md.render(mdTxt)">@((MarkupString)mdHtml)</div>
</div>

<style>
div#index{
	display: flex;
	justify-content: space-between;
	height: 92vh;
	width: 100%;
}
#index textarea,#index div{
	width:50%;
	margin:5px;
}
#index div{
	overflow-y: scroll;
}
#index textarea,#index code{
	font-family: "M+ 1mn";
	font-size: 1.1em;
}
#index code{
	border: 1px solid #CCC;
}
</style>

@using Markdig;
@implements IDisposable;
@inject IJSRuntime js;
@inject AppStore state;

@code{
	protected override void OnInitialized(){state.OnChange+=StateHasChanged;}
	public void Dispose(){state.OnChange-=StateHasChanged;}

	MarkdownPipeline md=new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
	string mdTxt{
		get{return state.mdTxt;}
		set{
			state.setMdTxt(value);
			state.setMdHtml(mdHtml);
		}
	}
	string mdHtml{get{return Markdown.ToHtml(mdTxt.Replace("\n","  \n"),md);}}

	protected override async Task OnAfterRenderAsync(bool firstRender){
		if(firstRender){
			mdTxt=
@"# TEST TITLE

*<span style=color:#990099>Say</span>*
**<u>Hello!</u>**

```cs
for(int i=0;i<100;i++){
	Console.WriteLine(i);
}
```
";
		}

		await js.InvokeVoidAsync("eval","hljs.initHighlighting.called=false");
		await js.InvokeVoidAsync("hljs.initHighlighting");
	}
}
