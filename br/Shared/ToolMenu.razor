<div style=display:flex>
	<img src="./favicon.ico" height=32 width=32 style=image-rendering:pixelated>
	<button @onclick="newItem">❇新規</button>
	<input placeholder=" [題名]" list="mdDatas" @bind="mdTitle">
	<datalist id="mdDatas">@foreach(var (key,value) in mdDatas){
		<option @key="key">@key</option>
	}</datalist>
	<button @onclick="loadItem">📖読込</button>
	<button @onclick="saveItem">💾保存</button>
	<button @onclick="deleteItem">🚫削除</button>
	<button @onclick="uploadMD">📂開く</button>
	<input type="file" accept=".md" @onchange="uploadFile" id="uploadFile" style="display: @(isViewFile? "": "none")">
	<button @onclick="downloadMD">📲Markdown</button>
	<button @onclick="downloadHTML">📲HTML</button>
</div>

<style>
</style>

@using System.Text.RegularExpressions;
@using static Util;
@implements IDisposable;
@inject IJSRuntime js;
@inject AppStore state;

@code{
	protected override void OnInitialized(){state.OnChange+=StateHasChanged;}
	public void Dispose(){state.OnChange-=StateHasChanged;}

	SortedDictionary<string,string> mdDatas=new SortedDictionary<string,string>{};
	string mdTitleCurrent="";
	string mdTitle="";
	string mdTxt{
		get{return state.mdTxt;}
		set{state.setMdTxt(value);}
	}
	string mdHtml{get{return state.mdHtml;}}
	bool isViewFile=false;

	protected override async Task OnInitializedAsync(){
		try{
			mdDatas=await Memory.load<SortedDictionary<string,string>>(js,"mdTxts");
		}
		catch{}
		StateHasChanged();
	}
	async Task newItem(){
		if(!await js.InvokeAsync<bool>("confirm","初期化してもよろしいですか?")) return;
		mdTitleCurrent="";
		mdTitle="";
		mdTxt="";
	}
	async Task loadItem(){
		if(!mdDatas.ContainsKey(mdTitle)){
			await js.InvokeVoidAsync("alert",$"「{mdTitle}」が存在しません。");
			return;
		}
		if(!await js.InvokeAsync<bool>("confirm",$"「{mdTitle}」を読み込みますか?")) return;
		mdTitleCurrent=mdTitle;
		mdTxt=mdDatas[mdTitle];
	}
	async Task saveItem(){
		if(mdTitle=="") mdTitle="default";
		if(mdDatas.ContainsKey(mdTitle)){
			if(mdTitleCurrent!=mdTitle){
				if(!await js.InvokeAsync<bool>("confirm",$"「{mdTitle}」を上書きしますか?")) return;
			}
		}
		else{
			mdDatas[mdTitle]=mdTxt;
		}
		mdTitleCurrent=mdTitle;
		await Memory.save(js,"mdTxts",mdDatas);
	}
	async Task deleteItem(){
		if(!mdDatas.ContainsKey(mdTitle)){
			await js.InvokeVoidAsync("alert",$"「{mdTitle}」が存在しません。");
			return;
		}
		if(!await js.InvokeAsync<bool>("confirm",$"「{mdTitle}」を削除しますか?")) return;
		mdTitleCurrent="";
		mdTitle="";
		mdTxt="";
	}
	void uploadMD(){
		isViewFile=!isViewFile;
	}
	async Task uploadFile(){
		isViewFile=false;
		var obj=await js.InvokeAsync<KeyValuePair<string,string>>("eval",@"(async()=>{
			const ele=document.getElementById('uploadFile');
			const reader=new FileReader();
			reader.readAsText(ele.files[0]);
			await new Promise(res=>reader.addEventListener('load',res));
			const obj={Key: ele.value,Value: reader.result.toString()};
			ele.value='';
			return obj;
		})()");
		mdTitle=(new LinkedList<string>(obj.Key.Split(new[]{'\\','/'}))).Last.Value;
		mdTxt=obj.Value;
		await Task.Delay(1000);
		StateHasChanged();
	}
	async Task downloadMD(){
		if(mdTitle=="") mdTitle="default";
		await downloadText(js,mdTitle,mdTxt,".md");
	}
	async Task downloadHTML(){
		if(mdTitle=="") mdTitle="default";
		await downloadText(js,mdTitle,
$@"<!DOCTYPE html>
<html lang=ja>

<head>
	<title>{mdTitle}</title>
	<link rel=stylesheet href=""https://unpkg.com/karma-css@latest/dist/karma.min.css"">
	<link rel=stylesheet href=""https://fonts.googleapis.com/css?family=Kosugi&display=swap"">
	<link rel=stylesheet href=""https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/styles/vs.min.css"">
	<script src=""https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js""></script>
	<style>code{{font-family: ""Kosugi"",sans-serif;}}</style>
</head>

<body>
	"+mdHtml.Replace("\n","\n\t")+@"
	<script>hljs.initHighlighting();</script>
</body>

</html>
",".html");
	}
}
